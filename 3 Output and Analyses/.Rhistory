dat4$Procedure.Trial.Type != "Instruct")
dat5 = subset(dat5,
dat5$Procedure.Trial.Type != "Instruct")
#Now remove filler task
dat = subset(dat,
dat$Procedure.Trial.Type != "FreeRecall")
dat2 = subset(dat2,
dat2$Procedure.Trial.Type != "FreeRecall")
dat3 = subset(dat3,
dat3$Procedure.Trial.Type != "FreeRecall")
dat4 = subset(dat4,
dat4$Procedure.Trial.Type != "FreeRecall")
dat5 = subset(dat5,
dat5$Procedure.Trial.Type != "FreeRecall")
####Set the data up for scoring####
#Start by subsetting out the recall and JOL data for each dataset
dat.JOL = subset(dat,
dat$Procedure.Trial.Type == "JOL")
dat.Recall = subset(dat,
dat$Procedure.Trial.Type == "Test")
#get JOLs and Recall in the same order
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Cue), ]
dat.JOL = dat.JOL[order(dat.JOL$Condition.Number), ]
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Shuffle), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Cue), ]
dat.Recall = dat.Recall[order(dat.Recall$Condition.Number), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat.R = dat.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
JOL = cbind(dat.JOL, dat.R)
JOL = JOL[ , -c(11, 13:14)]
colnames(JOL)[11] = "JOL.RT"
JOL = JOL[ , -c(9:10)]
JOL = JOL[ , -2]
##Now do the same for the study only condition
#Start by subsetting out the recall and study trials for each dataset
dat2.Study = subset(dat2,
dat2$Procedure.Trial.Type == "Study")
dat2.Recall = subset(dat2,
dat2$Procedure.Trial.Type == "Test")
#get Study and Recall in the same order
dat2.Study = dat2.Study[order(dat2.Study$Stimuli.Cue), ]
dat2.Study = dat2.Study[order(dat2.Study$Condition.Number), ]
dat2.Study = dat2.Study[order(dat2.Study$Stimuli.Shuffle), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Stimuli.Cue), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Condition.Number), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat2.R = dat2.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
Study = cbind(dat2.Study, dat2.R)
Study = Study[ , -c(11, 13:14)]
colnames(Study)[11] = "Study.RT"
Study = Study[ , -c(9:10)]
Study = Study[ , -2]
##Now do the frequency judgments
#Start by subsetting out the recall and JOL data for each dataset
dat3.FREQ = subset(dat3,
dat3$Procedure.Trial.Type == "FREQ")
dat3.Recall = subset(dat3,
dat3$Procedure.Trial.Type == "Test")
#get JOLs and Recall in the same order
dat3.FREQ = dat3.FREQ[order(dat3.FREQ$Stimuli.Cue), ]
dat3.FREQ = dat3.FREQ[order(dat3.FREQ$Condition.Number), ]
dat3.FREQ = dat3.FREQ[order(dat3.FREQ$Stimuli.Shuffle), ]
dat3.Recall = dat3.Recall[order(dat3.Recall$Stimuli.Cue), ]
dat3.Recall = dat3.Recall[order(dat3.Recall$Condition.Number), ]
dat3.Recall = dat3.Recall[order(dat3.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat3.R = dat3.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
FREQ = cbind(dat3.FREQ, dat3.R)
FREQ = FREQ[ , -c(11, 13:14)]
colnames(FREQ)[11] = "FREQ.RT"
FREQ = FREQ[ , -c(9:10)]
FREQ = FREQ[ , -2]
##Now do the Vowel Counting
#Start by subsetting out the recall and JOL data for each dataset
dat4.VC = subset(dat4,
dat4$Procedure.Trial.Type == "VC")
dat4.Recall = subset(dat4,
dat4$Procedure.Trial.Type == "Test")
#get JOLs and Recall in the same order
dat4.VC = dat4.VC[order(dat4.VC$Stimuli.Cue), ]
dat4.VC = dat4.VC[order(dat4.VC$Condition.Number), ]
dat4.VC = dat4.VC[order(dat4.VC$Stimuli.Shuffle), ]
dat4.Recall = dat4.Recall[order(dat4.Recall$Stimuli.Cue), ]
dat4.Recall = dat4.Recall[order(dat4.Recall$Condition.Number), ]
dat4.Recall = dat4.Recall[order(dat4.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat4.R = dat4.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
VC = cbind(dat4.VC, dat4.R)
VC = VC[ , -c(11, 13:14)]
colnames(VC)[11] = "VC.RT"
VC = VC[ , -c(9:10)]
VC = VC[ , -2]
##Now for the relational study task
#Start by subsetting out the recall and study trials for each dataset
dat5.Study = subset(dat5,
dat5$Procedure.Trial.Type == "Study")
dat5.Recall = subset(dat5,
dat5$Procedure.Trial.Type == "Test")
#get Study and Recall in the same order
dat5.Study = dat5.Study[order(dat5.Study$Stimuli.Cue), ]
dat5.Study = dat5.Study[order(dat5.Study$Condition.Number), ]
dat5.Study = dat5.Study[order(dat5.Study$Stimuli.Shuffle), ]
dat5.Recall = dat5.Recall[order(dat5.Recall$Stimuli.Cue), ]
dat5.Recall = dat5.Recall[order(dat5.Recall$Condition.Number), ]
dat5.Recall = dat5.Recall[order(dat5.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat5.R = dat5.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
Study.RL = cbind(dat5.Study, dat5.R)
Study.RL = Study.RL[ , -c(11, 13:14)]
colnames(Study.RL)[11] = "Study.RT"
Study.RL = Study.RL[ , -c(9:10)]
Study.RL = Study.RL[ , -2]
####Score the recall data####
library(lrd)
##Start with the JOL data
JOL.key = tolower(JOL$Stimuli.Answer)
JOL.Response = tolower(JOL$Response.Response)
ID = JOL$Username
match1 = percent_match(JOL.Response, key = JOL.key, id = ID)
score_recall(match1, set.cutoff = 0.75)
scored1 = read.csv("output.csv")
JOL$Recall_Score = scored1$scored * 100
##Now do the study conditoin
Study.key = tolower(Study$Stimuli.Answer)
Study.Response = tolower(Study$Response.Response)
ID = Study$Username
match2 = percent_match(Study.Response, key = Study.key, id = ID)
score_recall(match2, set.cutoff = 0.75)
scored2 = read.csv("output.csv")
Study$Recall_Score = scored2$scored * 100
##Now do the Frequency condition
FREQ.key = tolower(FREQ$Stimuli.Answer)
FREQ.Response = tolower(FREQ$Response.Response)
ID = FREQ$Username
match3 = percent_match(FREQ.Response, key = FREQ.key, id = ID)
score_recall(match3, set.cutoff = 0.75)
scored3 = read.csv("output.csv")
FREQ$Recall_Score = scored3$scored * 100
##Now do the Vowel Counting Task
VC.key = tolower(VC$Stimuli.Answer)
VC.Response = tolower(VC$Response.Response)
ID = VC$Username
match4 = percent_match(VC.Response, key = VC.key, id = ID)
score_recall(match4, set.cutoff = 0.75)
scored4 = read.csv("output.csv")
VC$Recall_Score = scored4$scored * 100
##Now do the RELATIONAL study conditoin
Study.RL.key = tolower(Study.RL$Stimuli.Answer)
Study.RL.Response = tolower(Study.RL$Response.Response)
ID = Study.RL$Username
match5 = percent_match(Study.RL.Response, key = Study.RL.key, id = ID)
score_recall(match5, set.cutoff = 0.75)
scored5 = read.csv("output.csv")
Study.RL$Recall_Score = scored5$scored * 100
####Write combined raw output to data file####
write.csv(JOL, file = "Scored Output/JOL.csv", row.names = F)
write.csv(Study, file = "Scored Output/Study.csv", row.names = F)
write.csv(FREQ, file = "Scored Output/Freq.csv", row.names = F)
write.csv(VC, file = "Scored Output/VC.csv", row.names = F)
write.csv(Study.RL, file = "Scored Output/Study.RL.csv", row.names = F)
####Set up####
#load in data
JOL = read.csv("Scored Output/JOL.csv")
Study = read.csv("Scored Output/Study.csv")
FREQ = read.csv("Scored Output/FREQ.csv")
VC = read.csv("Scored Output/VC.csv")
Study.RL = read.csv("Scored Output/Study.RL.csv")
#set up environment
options(scipen = 999)
library(reshape)
library(ez)
####Get descriptives####
summary(JOL)
summary(FREQ) #at least one out of range Frequency judgment
summary(Study)
summary(VC)
summary(Study.RL)
#Fix some of the column names
colnames(FREQ)[9] = "Response.FREQ"
colnames(JOL)[7] = "Direction"
colnames(FREQ)[7] = "Direction"
colnames(Study)[7] = "Direction"
colnames(VC)[7] = "Direction"
colnames(Study.RL)[7] = "Direction"
FREQ$Response.FREQ[FREQ$Response.FREQ > 100] = NA
####Get Recall and judgment means split by direction####
##Start with the JOL data
tapply(JOL$Response.JOL, JOL$Direction, mean, na.rm = T)
tap1 = tapply(JOL$Recall_Score, JOL$Direction, mean, na.rm = T)
#look at it by subject
tapply(JOL$Recall_Score, list(JOL$Username, JOL$Direction), mean, na.rm = T)
##Lets do the frequency judgments next
tapply(FREQ$Response.FREQ, FREQ$Direction, mean, na.rm = T)
tap2 = tapply(FREQ$Recall_Score, FREQ$Direction, mean, na.rm = T) #Recall is trending in the right direction
#look at it by subject
tapply(FREQ$Recall_Score, list(FREQ$Username, FREQ$Direction), mean, na.rm = T)
##Lets look at recall for the study condition
tap3 = tapply(Study$Recall_Score, Study$Direction, mean, na.rm = T)
#look at it by subject
tapply(Study$Recall_Score, list(Study$Username, Study$Direction), mean, na.rm = T)
#Look at the vowel counting task
tap4 = tapply(VC$Recall_Score, VC$Direction, mean, na.rm = T)
#Look at relational study task
tap5 = tapply(Study.RL$Recall_Score, Study.RL$Direction, mean, na.rm = T)
#Compare recall across each task
tap1;tap2;tap3;tap4;tap5
#Get number of participants in each condition
length(unique(JOL$Username))
length(unique(FREQ$Username))
length(unique(Study$Username))
length(unique(VC$Username))
length(unique(Study.RL$Username))
####This script will be used to read everythinag to set data up for processing####
##Start by gathering all of the data
#JOL and Frequency Judgments
setwd("C:/Users/nickm.000/Documents/JOL reactivity/3 Output/EX 1/Raw Collector Judgments") #get the correct directory
#Get the files names
files = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat = do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat$Username))
#Now do the study only condition
setwd('..')
setwd("C:/Users/nickm.000/Documents/JOL reactivity/3 Output/EX 1/Raw Collector Study") #get the correct directory
#Get the files names
files2 = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat2 = do.call(rbind, lapply(files2, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat2$Username))
#Now do the vowel counting task
setwd('..')
setwd("C:/Users/nickm.000/Documents/JOL reactivity/3 Output/EX 1/Raw Collector Vowel") #get the correct directory
#Get the files names
files3 = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat4 = do.call(rbind, lapply(files3, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat4$Username))
#Now move back to the 3 output folder
#This is where I'll store the combined final output for scoring
setwd('..')
#Now do the relational task
setwd('..')
setwd("C:/Users/nickm.000/Documents/JOL reactivity/3 Output/EX 1/Raw Collector Relational Study") #get the correct directory
#Get the files names
files4 = list.files(pattern = "*.csv")
#Put them in one dataframe. First apply read.csv, then rbind
dat5 = do.call(rbind, lapply(files4, function(x) read.csv(x, stringsAsFactors = FALSE)))
#get the number of participants
length(unique(dat5$Username))
#Now move back to the 3 output folder
#This is where I'll store the combined final output for scoring
setwd('..')
####Clean up the data files####
##Let's separate out the frequency judgment data from the JOLs
dat3 = subset(dat,
dat$Condition.Number > 8) ##Frequency
dat = subset(dat,
dat$Condition.Number < 9) ##JOLs
##Drop unused columns
dat = dat[ , -c(2:4, 6:7, 9:10, 12, 20:24, 28:32,  34)] #JOL data
dat2 = dat2[ , -c(2:4, 6:7, 9:10, 12, 20:24, 28:33)] #Study condition
dat3 = dat3[ , -c(2:4, 6:7, 9:10, 12, 20:24, 28:32,  34)] #Frequency condition
dat4 = dat4[ , -c(2:4, 6:7, 9:10, 12, 20:24, 28:32,  34)] #Vowel condition
dat5 = dat5[ , -c(2:4, 6:7, 9:10, 12, 20:24, 28:33)] #Relational Study
#Next, remove buffer trials
dat = subset(dat,
dat$Stimuli.Stimuli.Notes != "Buffer")
dat2 = subset(dat2,
dat2$Stimuli.Stimuli.Notes != "Buffer")
dat3 = subset(dat3,
dat3$Stimuli.Stimuli.Notes != "Buffer")
dat4 = subset(dat4,
dat4$Stimuli.Stimuli.Notes != "Buffer")
dat5 = subset(dat5,
dat5$Stimuli.Stimuli.Notes != "Buffer")
#Now remove instruction trials
dat = subset(dat,
dat$Procedure.Trial.Type != "Instruct")
dat2 = subset(dat2,
dat2$Procedure.Trial.Type != "Instruct")
dat3 = subset(dat3,
dat3$Procedure.Trial.Type != "Instruct")
dat4 = subset(dat4,
dat4$Procedure.Trial.Type != "Instruct")
dat5 = subset(dat5,
dat5$Procedure.Trial.Type != "Instruct")
#Now remove filler task
dat = subset(dat,
dat$Procedure.Trial.Type != "FreeRecall")
dat2 = subset(dat2,
dat2$Procedure.Trial.Type != "FreeRecall")
dat3 = subset(dat3,
dat3$Procedure.Trial.Type != "FreeRecall")
dat4 = subset(dat4,
dat4$Procedure.Trial.Type != "FreeRecall")
dat5 = subset(dat5,
dat5$Procedure.Trial.Type != "FreeRecall")
####Set the data up for scoring####
#Start by subsetting out the recall and JOL data for each dataset
dat.JOL = subset(dat,
dat$Procedure.Trial.Type == "JOL")
dat.Recall = subset(dat,
dat$Procedure.Trial.Type == "Test")
#get JOLs and Recall in the same order
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Cue), ]
dat.JOL = dat.JOL[order(dat.JOL$Condition.Number), ]
dat.JOL = dat.JOL[order(dat.JOL$Stimuli.Shuffle), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Cue), ]
dat.Recall = dat.Recall[order(dat.Recall$Condition.Number), ]
dat.Recall = dat.Recall[order(dat.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat.R = dat.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
JOL = cbind(dat.JOL, dat.R)
JOL = JOL[ , -c(11, 13:14)]
colnames(JOL)[11] = "JOL.RT"
JOL = JOL[ , -c(9:10)]
JOL = JOL[ , -2]
##Now do the same for the study only condition
#Start by subsetting out the recall and study trials for each dataset
dat2.Study = subset(dat2,
dat2$Procedure.Trial.Type == "Study")
dat2.Recall = subset(dat2,
dat2$Procedure.Trial.Type == "Test")
#get Study and Recall in the same order
dat2.Study = dat2.Study[order(dat2.Study$Stimuli.Cue), ]
dat2.Study = dat2.Study[order(dat2.Study$Condition.Number), ]
dat2.Study = dat2.Study[order(dat2.Study$Stimuli.Shuffle), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Stimuli.Cue), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Condition.Number), ]
dat2.Recall = dat2.Recall[order(dat2.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat2.R = dat2.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
Study = cbind(dat2.Study, dat2.R)
Study = Study[ , -c(11, 13:14)]
colnames(Study)[11] = "Study.RT"
Study = Study[ , -c(9:10)]
Study = Study[ , -2]
##Now do the frequency judgments
#Start by subsetting out the recall and JOL data for each dataset
dat3.FREQ = subset(dat3,
dat3$Procedure.Trial.Type == "FREQ")
dat3.Recall = subset(dat3,
dat3$Procedure.Trial.Type == "Test")
#get JOLs and Recall in the same order
dat3.FREQ = dat3.FREQ[order(dat3.FREQ$Stimuli.Cue), ]
dat3.FREQ = dat3.FREQ[order(dat3.FREQ$Condition.Number), ]
dat3.FREQ = dat3.FREQ[order(dat3.FREQ$Stimuli.Shuffle), ]
dat3.Recall = dat3.Recall[order(dat3.Recall$Stimuli.Cue), ]
dat3.Recall = dat3.Recall[order(dat3.Recall$Condition.Number), ]
dat3.Recall = dat3.Recall[order(dat3.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat3.R = dat3.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
FREQ = cbind(dat3.FREQ, dat3.R)
FREQ = FREQ[ , -c(11, 13:14)]
colnames(FREQ)[11] = "FREQ.RT"
FREQ = FREQ[ , -c(9:10)]
FREQ = FREQ[ , -2]
##Now do the Vowel Counting
#Start by subsetting out the recall and JOL data for each dataset
dat4.VC = subset(dat4,
dat4$Procedure.Trial.Type == "VC")
dat4.Recall = subset(dat4,
dat4$Procedure.Trial.Type == "Test")
#get JOLs and Recall in the same order
dat4.VC = dat4.VC[order(dat4.VC$Stimuli.Cue), ]
dat4.VC = dat4.VC[order(dat4.VC$Condition.Number), ]
dat4.VC = dat4.VC[order(dat4.VC$Stimuli.Shuffle), ]
dat4.Recall = dat4.Recall[order(dat4.Recall$Stimuli.Cue), ]
dat4.Recall = dat4.Recall[order(dat4.Recall$Condition.Number), ]
dat4.Recall = dat4.Recall[order(dat4.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat4.R = dat4.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
VC = cbind(dat4.VC, dat4.R)
VC = VC[ , -c(11, 13:14)]
colnames(VC)[11] = "VC.RT"
VC = VC[ , -c(9:10)]
VC = VC[ , -2]
##Now for the relational study task
#Start by subsetting out the recall and study trials for each dataset
dat5.Study = subset(dat5,
dat5$Procedure.Trial.Type == "Study")
dat5.Recall = subset(dat5,
dat5$Procedure.Trial.Type == "Test")
#get Study and Recall in the same order
dat5.Study = dat5.Study[order(dat5.Study$Stimuli.Cue), ]
dat5.Study = dat5.Study[order(dat5.Study$Condition.Number), ]
dat5.Study = dat5.Study[order(dat5.Study$Stimuli.Shuffle), ]
dat5.Recall = dat5.Recall[order(dat5.Recall$Stimuli.Cue), ]
dat5.Recall = dat5.Recall[order(dat5.Recall$Condition.Number), ]
dat5.Recall = dat5.Recall[order(dat5.Recall$Stimuli.Shuffle), ]
#Okay, put it back together now
dat5.R = dat5.Recall[ , c(12:14)]
#Drop overlapping columns and clean things up
Study.RL = cbind(dat5.Study, dat5.R)
Study.RL = Study.RL[ , -c(11, 13:14)]
colnames(Study.RL)[11] = "Study.RT"
Study.RL = Study.RL[ , -c(9:10)]
Study.RL = Study.RL[ , -2]
####Score the recall data####
library(lrd)
##Start with the JOL data
JOL.key = tolower(JOL$Stimuli.Answer)
JOL.Response = tolower(JOL$Response.Response)
ID = JOL$Username
match1 = percent_match(JOL.Response, key = JOL.key, id = ID)
score_recall(match1, set.cutoff = 0.75)
scored1 = read.csv("output.csv")
JOL$Recall_Score = scored1$scored * 100
##Now do the study conditoin
Study.key = tolower(Study$Stimuli.Answer)
Study.Response = tolower(Study$Response.Response)
ID = Study$Username
match2 = percent_match(Study.Response, key = Study.key, id = ID)
score_recall(match2, set.cutoff = 0.75)
scored2 = read.csv("output.csv")
Study$Recall_Score = scored2$scored * 100
##Now do the Frequency condition
FREQ.key = tolower(FREQ$Stimuli.Answer)
FREQ.Response = tolower(FREQ$Response.Response)
ID = FREQ$Username
match3 = percent_match(FREQ.Response, key = FREQ.key, id = ID)
score_recall(match3, set.cutoff = 0.75)
scored3 = read.csv("output.csv")
FREQ$Recall_Score = scored3$scored * 100
##Now do the Vowel Counting Task
VC.key = tolower(VC$Stimuli.Answer)
VC.Response = tolower(VC$Response.Response)
ID = VC$Username
match4 = percent_match(VC.Response, key = VC.key, id = ID)
score_recall(match4, set.cutoff = 0.75)
scored4 = read.csv("output.csv")
VC$Recall_Score = scored4$scored * 100
##Now do the RELATIONAL study conditoin
Study.RL.key = tolower(Study.RL$Stimuli.Answer)
Study.RL.Response = tolower(Study.RL$Response.Response)
ID = Study.RL$Username
match5 = percent_match(Study.RL.Response, key = Study.RL.key, id = ID)
score_recall(match5, set.cutoff = 0.75)
scored5 = read.csv("output.csv")
Study.RL$Recall_Score = scored5$scored * 100
####Write combined raw output to data file####
write.csv(JOL, file = "Scored Output/JOL.csv", row.names = F)
write.csv(Study, file = "Scored Output/Study.csv", row.names = F)
write.csv(FREQ, file = "Scored Output/Freq.csv", row.names = F)
write.csv(VC, file = "Scored Output/VC.csv", row.names = F)
write.csv(Study.RL, file = "Scored Output/Study.RL.csv", row.names = F)
####Set up####
#load in data
JOL = read.csv("Scored Output/JOL.csv")
Study = read.csv("Scored Output/Study.csv")
FREQ = read.csv("Scored Output/FREQ.csv")
VC = read.csv("Scored Output/VC.csv")
Study.RL = read.csv("Scored Output/Study.RL.csv")
#set up environment
options(scipen = 999)
library(reshape)
library(ez)
####Get descriptives####
summary(JOL)
summary(FREQ) #at least one out of range Frequency judgment
summary(Study)
summary(VC)
summary(Study.RL)
#Fix some of the column names
colnames(FREQ)[9] = "Response.FREQ"
colnames(JOL)[7] = "Direction"
colnames(FREQ)[7] = "Direction"
colnames(Study)[7] = "Direction"
colnames(VC)[7] = "Direction"
colnames(Study.RL)[7] = "Direction"
FREQ$Response.FREQ[FREQ$Response.FREQ > 100] = NA
####Get Recall and judgment means split by direction####
##Start with the JOL data
tapply(JOL$Response.JOL, JOL$Direction, mean, na.rm = T)
tap1 = tapply(JOL$Recall_Score, JOL$Direction, mean, na.rm = T)
#look at it by subject
tapply(JOL$Recall_Score, list(JOL$Username, JOL$Direction), mean, na.rm = T)
##Lets do the frequency judgments next
tapply(FREQ$Response.FREQ, FREQ$Direction, mean, na.rm = T)
tap2 = tapply(FREQ$Recall_Score, FREQ$Direction, mean, na.rm = T) #Recall is trending in the right direction
#look at it by subject
tapply(FREQ$Recall_Score, list(FREQ$Username, FREQ$Direction), mean, na.rm = T)
##Lets look at recall for the study condition
tap3 = tapply(Study$Recall_Score, Study$Direction, mean, na.rm = T)
#look at it by subject
tapply(Study$Recall_Score, list(Study$Username, Study$Direction), mean, na.rm = T)
#Look at the vowel counting task
tap4 = tapply(VC$Recall_Score, VC$Direction, mean, na.rm = T)
#Look at relational study task
tap5 = tapply(Study.RL$Recall_Score, Study.RL$Direction, mean, na.rm = T)
#Compare recall across each task
tap1;tap2;tap3;tap4;tap5
#Get number of participants in each condition
length(unique(JOL$Username))
length(unique(FREQ$Username))
length(unique(Study$Username))
length(unique(VC$Username))
length(unique(Study.RL$Username))
