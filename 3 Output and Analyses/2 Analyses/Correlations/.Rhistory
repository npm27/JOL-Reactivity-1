tapply(RL$Difference, list(RL$Direction, RL$BIN), mean)
tapply(read$Difference2, list(read$Direction, read$BIN), mean)
tapply(IS$Difference2, list(IS$Direction, IS$BIN), mean)
tapply(RL$Difference2, list(RL$Direction, RL$BIN), mean)
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = Encoding,
within = .(Direction, BIN),
dv = Difference2,
type = 3,
detailed = T)
dat$BIN = factor(dat$BIN)
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = Encoding,
within = .(Direction, BIN),
dv = Difference2,
type = 3,
detailed = T)
summary(dat)
with(dat, table(id, Direction, BIN))
with(dat, table(ID, Direction, BIN))
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(Encoding, BIN),
within = Direction,
dv = Difference2,
type = 3,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(Encoding, BIN),
within = Direction,
dv = Difference,
type = 3,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(Encoding, BIN),
within = Direction,
dv = Difference,
type = 1,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(Encoding, BIN),
within = Direction,
dv = Difference,
type = 2,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(Encoding, BIN),
within = Direction,
dv = Difference,
type = 3,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(Encoding),
within = Direction,
dv = Difference,
type = 3,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(BIN),
within = Direction,
dv = Difference,
type = 3,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(BIN, Encoding),
within = Direction,
dv = Difference,
type = 3,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(BIN, Encoding),
#within = Direction,
dv = Difference,
type = 3,
detailed = T)
model
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(BIN, Encoding),
within = Direction,
dv = Difference2,
type = 3,
detailed = T)
model
setwd("~/GitHub/Emily-Honors-Thesis/Ex 1/2 Analysis/Confidence Plots/SPSS")
library(reshape)
library(ez)
library(readxl)
dat = read_xlsx("EX 1 ANALYSES DATA.xlsx")
View(dat)
dat_long = melt(dat,
measure.vars = c("Subject", "Encoding"))
dat_long = melt(dat,
id.vars = c("Subject", "Encoding"))
dat_long = melt(dat,
id = c("Subject", "Encoding"))
dat_long = melt(dat,
id = c("Subject", "Encoding"))
melt(dat,
id = c("Subject", "Encoding"))
melt(dat,
id = "Encoding")
melt(dat,
id = "Subject")
reshape::melt(dat)
reshape::melt(dat)
dat = data.frame(dat)
reshape::melt(dat)
dat_long = melt(dat,
id = c("Subject", "Encoding"))
View(dat_long)
library(splitstackshape)
substr(dat_long$variable)
substr(dat_long$variable, 1)
substr(dat_long$variable, 1, 1)
dat_long$direction = substr(dat_long$variable, 1, 1)
substring(dat_long$variable, 1)
substring(dat_long$variable, -1)
substring(dat_long$variable, 2)
dat_bin = substring(dat_long$variable, 2)
dat_long$bin = substring(dat_long$variable, 2)
dat_long = dat_long[ , -3]
colnames(dat_long)[3] = "Recall"
dat_long$diff1 = as.numeric(dat_long$bin) - dat_long$Recall
dat_long$diff2 = abs(dat_long$diff1)
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = .(bin, Encoding),
within = direction,
dv = diff1,
type = 3,
detailed = T)
model
options(scipen = 999)
model
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = .(bin, Encoding),
within = direction,
dv = diff2,
type = 3,
detailed = T)
model
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = .(bin, Encoding),
within = direction,
dv = diff1,
type = 3,
detailed = T)
model
##descriptives
tapply(dat_long$diff1, list(dat_long$direction, dat_long$bIN), mean)
##descriptives
tapply(dat_long$diff1, list(dat_long$direction, dat_long$bin), mean)
read = subset(dat_long,
dat_long$Encoding == "Read")
IS = subset(dat_long,
dat_long$Encoding == "IS")
RL = subset(dat_long,
dat_long$Encoding == "RL")
tapply(read$diff1, list(read$direction, read$bin), mean)
read$diff1
read = subset(dat_long,
dat_long$Encoding == "READ")
tapply(read$diff1, list(read$direction, read$bin), mean)
tapply(IS$diff1, list(IS$direction, IS$bin), mean)
tapply(RL$diff1, list(RL$direction, RL$bin), mean)
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = Encoding,
within = .(bin, direction),
dv = diff1,
type = 3,
detailed = T)
model
####ANOVA TIME####
model = ezANOVA(dat_long,
wid = Subject,
between = Encoding,
within = .(bin, direction),
dv = diff2,
type = 3,
detailed = T)
model
setwd("~/")
dat = read.csv("Updated conf plots.csv")
library(ez)
tapply(dat$Difference, list(dat$Direction, dat$BIN), mean)
read = subset(dat,
dat$Encoding == "Read")
IS = subset(dat,
dat$Encoding == "IS")
RL = subset(dat,
dat$Encoding == "RL")
tapply(read$Difference2, list(read$Direction, read$BIN), mean)
tapply(IS$Difference2, list(IS$Direction, IS$BIN), mean)
tapply(RL$Difference2, list(RL$Direction, RL$BIN), mean)
dat$BIN = factor(dat$BIN)
#difference scores first
model = ezANOVA(dat,
wid = ID,
between = .(BIN, Encoding, Direction),
dv = Difference2,
type = 3,
detailed = T)
model
130*4
setwd("~/GitHub/Mitch-FWHR/Study 5")
####Set up####
##load libraries
library(memisc)
library(reshape)
library(ez)
library(lme4)
library(car)
library(effects) #maybe use this for interactions?
library(ggplot2) #plot the things!
library(emmeans)
##turn of scientific notation
options(scipen = 999)
##load data
dat = as.data.set(spss.system.file("Study 5.sav"))
dat = as.data.frame(dat)
####Get the dataset in the correct shape####
dat = melt(dat[ , -c(43:57)], id.vars = c("id", "Sex"))
#fwhr
dat$fwhr = dat$variable
dat$fwhr = substr(dat$fwhr, 0, 1)
#target sex
dat$Target_Sex = sub('.*(?=.{1}$)', '', dat$variable, perl = T)
##parenting
#parenting
dat$variable = sub('.*(?=.{2}$)', '', dat$variable, perl = T)
dat$variable = substr(dat$variable, 1, 1)
colnames(dat)[3] = "Parenting"
##score
colnames(dat)[4] = "Score"
dat$Score = as.numeric(dat$Score)
####Model Time!####
##Make the final model first
model.final = lmer(Score ~ Sex * Parenting * fwhr * Target_Sex + (1|id),
data = dat,
REML = FALSE)
summary(model.final)
Anova(model.final, type = "III")
dat2 = na.omit(dat)
ezANOVA(dat2,
wid = id,
between = Sex,
within = .(Target_Sex, Parenting, fwhr),
dv = Score,
type = 3,
detailed = T)
tapply(dat2$Score, list(dat2$Target_Sex, dat2$Parenting), mean)
##intercept only
model.int = lmer(Score ~ (1|id),
data = dat,
REML = FALSE)
summary(model.int)
#between only
model.between = lmer(Score ~ Sex + Target_Sex + (1|id),
data = dat,
REML = FALSE)
summary(model.between)
#main effects only
model.mf = lmer(Score ~ Sex + Parenting + fwhr + Target_Sex + (1|id),
data = dat,
REML = FALSE)
summary(model.mf)
##compare models
anova(model.int, model.between, model.mf, model.final)
anova(model.int, model.final)
anova(model.mf, model.final)
##Get BF
bayestestR::bayesfactor_models(model.final, denominator = model.int)
bayestestR::bayesfactor_models(model.final, denominator = model.between)
####Interactions####
##Parenting x fwhr
ef1 = effect(term = "Parenting * fwhr",  mod = model.final)
plot(ef1)
##Try another way of visualizing
plot(ef1, multiline = TRUE, confint = TRUE, ci.style = "bars",
main = "Parental Effectiveness as a function of Parenting Style and fWHR",
xlab = "Context",
ylab = "Score")
##Parenting X Target Sex
ef2 = effect(term = "Parenting * Target_Sex",  mod = model.final)
plot(ef2)
##Try another way of visualizing
plot(ef2, multiline = TRUE, confint = TRUE, ci.style = "bars",
main = "Parental Effectiveness as a function of Parenting Style and Target Sex",
xlab = "Context",
ylab = "Score")
ezANOVA(dat2,
wid = id,
between = Sex,
within = .(Target_Sex, Parenting, fwhr),
dv = Score,
type = 3,
detailed = T)
summary(model.final)
Anova(model.final, type = "III")
setwd("~/GitHub/Mitch-FWHR/Study 6")
####Set up####
##load libraries
library(memisc)
library(reshape)
library(ez)
library(lme4)
library(car)
##turn of scientific notation
options(scipen = 999)
##load data
dat = as.data.set(spss.system.file("Study 6.sav"))
dat = as.data.frame(dat)
##make columns for the different variables
#need high and low for fwhr. Also need both pcat subscales (p and w?)
###fwhr
##build the fwhr data
fwhr_dat = dat[ , c(1, 3:22, 33, 39, 40)]
#melt
fwhr_long = melt(fwhr_dat,
id.vars = c("id", "Sex",
"Nurture_AVG", "Protect_AVG"))
#fix column names
colnames(fwhr_long)[5:6] = c("fwhr", "score")
#fix fwhr column (just make it H's and L's)
fwhr_long$fwhr = substr(fwhr_long$fwhr, start = 1, stop = 1)
#make score numeric
fwhr_long$score = as.numeric(fwhr_long$score)
####Model time####
##Make the final model first
model.final = lmer(score ~ Sex * fwhr + Nurture_AVG + Protect_AVG + (1|id),
data = fwhr_long,
REML = FALSE)
summary(model.final)
model.int = lmer(score ~  + (1|id),
data = fwhr_long,
REML = FALSE)
model.int = lmer(score ~  Sex + fwhr + Nurture_AVG + Protect_AVG + (1|id),
data = fwhr_long,
REML = FALSE)
model.mf = lmer(score ~  Sex + fwhr + Nurture_AVG + Protect_AVG + (1|id),
data = fwhr_long,
REML = FALSE)
model.int = lmer(score ~  + (1|id),
data = fwhr_long,
REML = FALSE)
anova(model.int, model.final)
anova(model.mf, model.final)
##Get BF
bayestestR::bayesfactor_models(model.final, denominator = model.int)
bayestestR::bayesfactor_models(model.final, denominator = model.between)
bayestestR::bayesfactor_models(model.final, denominator = model.mf)
summary(model.final)
View(dat)
View(fwhr_long)
table(dat$Sex)
Anova(model.final, type = "III") #looks like nothing is significant
setwd("~/GitHub/JOL-Reactivity-1/3 Output and Analyses/2 Analyses/Correlations")
####Set up####
##libraries
library(readxl)
library(reshape)
library(psych)
library(Hmisc)
#READ IN DATA
JOL1 = read_xlsx("Correlations.xlsx", sheet = "JOL1")
JOL2 = read_xlsx("Correlations.xlsx", sheet = "JOL2")
JOL3 = read_xlsx("Correlations.xlsx", sheet = "JOL3")
JOL4 = read_xlsx("Correlations.xlsx", sheet = "JOL4")
JAM = read_xlsx("Correlations.xlsx", sheet = "JAM")
FREQ = read_xlsx("Correlations.xlsx", sheet = "FREQ")
##Combine
dat = rbind(JOL1, JOL2, JOL3, JOL4, JAM, FREQ)
#remove out of range scores
dat$Rating = as.numeric(dat$Rating)
dat$Rating[dat$Rating > 100] = NA
#fix the case
dat$Stimuli.Cue = tolower(dat$Stimuli.Cue)
dat$Stimuli.Answer = tolower(dat$Stimuli.Answer)
##get mean ratings for each item by task
dat2 = cast(dat[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
cor(dat2)
##can we get p-values?
rcorr(as.matrix(dat2))
####Just compare within experiments
ex2 = subset(dat,
dat$Experiment == "2")
ex3 = subset(dat,
dat$Experiment == "3")
ex2 = cast(ex2[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
ex3 = cast(ex3[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
temp = cbind(ex2, ex3)
temp = temp[ , -c(1, 3, 4, 6)]
cor(ex2)
cor(ex3)
cor(temp)
rcorr(as.matrix(ex2))
rcorr(as.matrix(ex3))
rcorr(as.matrix(temp))
####Split it up by high-low (related, unrelated)####
##JAM
JAM_R = subset(JAM,
JAM$Stimuli.Stimuli.Notes != "U")
JAM_U = subset(JAM,
JAM$Stimuli.Stimuli.Notes == "U")
##JOL
JOL1_R = subset(JOL1,
JOL1$Stimuli.Stimuli.Notes != "U")
JOL1_U = subset(JOL1,
JOL1$Stimuli.Stimuli.Notes == "U")
JOL2_R = subset(JOL2,
JOL2$Stimuli.Stimuli.Notes != "U")
JOL2_U = subset(JOL2,
JOL2$Stimuli.Stimuli.Notes == "U")
JOL3_R = subset(JOL3,
JOL3$Stimuli.Stimuli.Notes != "U")
JOL3_U = subset(JOL3,
JOL3$Stimuli.Stimuli.Notes == "U")
JOL4_R = subset(JOL4,
JOL4$Stimuli.Stimuli.Notes != "U")
JOL4_U = subset(JOL4,
JOL4$Stimuli.Stimuli.Notes == "U")
##FREQ
FREQ_R = subset(FREQ,
FREQ$Stimuli.Stimuli.Notes != "U")
FREQ_U = subset(FREQ,
FREQ$Stimuli.Stimuli.Notes == "U")
####COMBINE####
dat3 = rbind(JOL1_R, JOL2_R, JOL3_R, JOL4_R, JAM_R, FREQ_R)
dat3$Rating = as.numeric(dat3$Rating)
dat3$Rating[dat3$Rating > 100] = NA
#fix the case
dat3$Stimuli.Cue = tolower(dat3$Stimuli.Cue)
dat3$Stimuli.Answer = tolower(dat3$Stimuli.Answer)
##get mean ratings for each item by task
dat4 = cast(dat3[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
cor(dat4)
##can we get p-values?
rcorr(as.matrix(dat4))
##Just by experiment
ex2 = subset(dat3,
dat3$Experiment == "2")
ex3 = subset(dat3,
dat3$Experiment == "3")
ex2 = cast(ex2[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
ex3 = cast(ex3[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
temp = cbind(ex2, ex3)
temp = temp[ , -c(1, 3, 4, 6)]
cor(ex2)
cor(ex3)
cor(temp)
##Now do unrelated
dat5 = rbind(JOL1_U, JOL2_U, JOL3_U, JOL4_U, JAM_U, FREQ_U)
dat5$Rating = as.numeric(dat5$Rating)
dat5$Rating[dat5$Rating > 100] = NA
#fix the case
dat5$Stimuli.Cue = tolower(dat5$Stimuli.Cue)
dat5$Stimuli.Answer = tolower(dat5$Stimuli.Answer)
##get mean ratings for each item by task
dat6 = cast(dat5[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
cor(dat6)
##can we get p-values?
rcorr(as.matrix(dat6))
##Just by experiment
ex2 = subset(dat5,
dat5$Experiment == "2")
ex3 = subset(dat5,
dat5$Experiment == "3")
ex2 = cast(ex2[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
ex3 = cast(ex3[ , c(1, 2, 3, 5, 6, 4)], Stimuli.Answer ~ TASK, mean, na.rm = T)
temp = cbind(ex2, ex3)
temp = temp[ , -c(1, 3, 4, 6)]
cor(ex2)
cor(ex3)
cor(temp)
